https://www.mongodb.com/products/self-managed/community-edition
https://www.mongodb.com/products/tools/compass

SQl          MongoDB
Database     Database
Table        Collection
Row          Document
SELECT       Find
Insert       Insert
Delete       Remove
Update       Update/upsert


https://www.mongodb.com/products/self-managed/community-edition
# Download and Install
# Go inside C drive and make folder by name of data
# Inside Data folder make folder by name of db
C:\data\db

> open cmd and start server (27017)
> go inside cd c:\programmFile\mongodb\..\bin
> mongod
* Do not close this cmd

^Mac
mongod --config /usr/local/etc/mongod.conf --fork


> Start Mongo Client
> open cmd 
> go inside cd c:\programmFile\mongodb\..\bin
> mongosh


mongodb://localhost:27017

//See all dbs
show dbs

//go inside Database
use databasename

//see all the Collection
show collections

//find all the data
db.collectionName.find()

//Add Condition in find
db.products.find({category_id:2})


//create new database
use databasename


//create collection/insert data
db.user.insert({name:"Aakash"})

{
  _id: ObjectId('67b00d0aa47308e249546eee'),
  name: 'Aakash'
}

_id > Primary key
> unique
> 12 byte size
4 bytes> timestamp
5 bytes> Random number
3 bytes> Counter


http://cloud.mongodb.com/

> Create Cluster

> Cloud
* https://www.mongodb.com/
* try free
> signup with google

* Network access
> Add IP 
> 0.0.0.0/0
* Database access
> Create user
Built-in Role
> Atlas Admin
> Add User


mongodb+srv://<db_username>:<db_password>@cluster0.f8vmc.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0


//Projection
db.restaurants.find({condition},{Projection})

db.restaurants.find({},{restaurant_name:1,_id:0,restaurant_thumb:1})


db.restaurants.find({},{mealTypes:0,_id:0,cuisines:0,image_gallery:0})


db.restaurants.find({state_id:3},{restaurant_name:1,_id:0,restaurant_thumb:1})


db.restaurants.find({"mealTypes.mealtype_id":1})


db.restaurants.find({},{restaurant_name:1,_id:0,address:1}).sort({restaurant_name:1})

db.restaurants.find({},{restaurant_name:1,_id:0,address:1}).sort({restaurant_name:-1})


db.restaurants.find({},{restaurant_name:1,_id:0,cost:1}).sort({restaurant_name:1}).limit(5)


//first 5
db.restaurants.find({},{restaurant_name:1,_id:0,cost:1}).sort({cost:1}).skip(0).limit(5)

//from 6 to 10
db.restaurants.find({},{restaurant_name:1,_id:0,cost:1}).sort({cost:1}).skip(5).limit(5)

//from 11 to 15
db.restaurants.find({},{restaurant_name:1,_id:0,cost:1}).sort({cost:1}).skip(10).limit(5)



//from 16 to 20
db.restaurants.find({},{restaurant_name:1,_id:0,cost:1}).sort({cost:1}).skip(15).limit(5)

//
db.restaurants.find({cost:{$gt:900}},{restaurant_name:1,_id:0,cost:1})

db.restaurants.find({cost:{$gt:600,$lt:1000}},{restaurant_name:1,_id:0,cost:1})


db.restaurants.find({
  $and:[
    {"mealTypes.mealtype_id":1},
    {"cuisines.cuisine_id":1}
  ]
},
{
  restaurant_name:1,
  mealTypes:1,
  cuisines:1
})

db.restaurants.find({
  $or:[
    {"mealTypes.mealtype_id":1},
    {"cuisines.cuisine_id":1}
  ]
},
{
  restaurant_name:1,
  mealTypes:1,
  cuisines:1
})

//Update
db.collection.updateOne({condition,update})

db.orders.updateOne(
  {"orderId":6},
  {
    $set:{
      "status":"On the Way",
      "dorr Bell":"no"
    }
  }
)

db.orders.updateOne(
  {"orderId":6},
  {
    $unset:{
      "phone":1
    }
  }
)



db.orders.updateOne(
  {"orderId":7},
  {
    $unset:{
      "phone":1
    }
  }
)



db.orders.updateOne(
  {"orderId":7},
  {
    $set:{
        "orderId": 7,
        "name": "Kunal",
        "email": "kunal@gmail.com",
        "address": "Hom 65",
        "cost": 987,
        "menuItem": [
            89,
            76,
            45
        ],
        "status": "On the Way",
        "dorr Bell": "no"
    }
  },{
    upsert:true
  }
)

//Delete
//remove all data
db.users.remove({})

db.orders.delete({condition})

db.orders.deleteOne({"orderId":7})